################################################################################
# COPYRIGHT (C) 2008.  PNNL.  All Rights Reserved. 
#
# THIS FILE INITIALLY CREATED WITH:  
#     TEMPLATE NAME:  make_aux.template 
#     COMMAND NAME:   genmake -type aux 
#
# REPOSITORY INFORMATION: 
#  $Revision$ 
#  $Author$ 
#  $Date$ 
#
# _____________________________________________________________________________
# 
# SYNOPSIS: 
#  [put a single sentence stating purpose of this file] 
#
# DESCRIPTION: 
#  [describe in detail the purpose and uses of this file] 
#
# -----------------------------------------------------------------------------
# GNU MAKE INFO:
#   Interesting info taken from "GNU Make" by Stallman and McGrath (pp107-112).
#     GNU Automatic Variables
#       $@ => file name of the target of the rule
#       $% => target member name if archive (eg $% = bar.o given foo.a(bar.o))
#       $< => name of the first dependency
#       $^ => names of all dependencies (with spaces)
#       $? => names of all dependencies newer than the target (with spaces)
#       $* => target stem in implicit rule match (eg $*=x given a.x.b and a.%.b)
#     GNU Default Values for Variables
#       AR = ar        => archive maintaining program
#       ARFLAGS = rv   => flags for ar
#       CC = cc        => C compiler
#       FC = f77       => Fortran compiler
#       CPP = $(CC) -E => C preprocessor
#       CXX = g++      => C++ compiler
#       CO = co        => Extracting files from RCS
#       RM = rm -f     => Command to remove a file
# -----------------------------------------------------------------------------
#
# 
################################################################################
################################################################################
################################################################################
# VARIABLES SPECIFIC TO WHAT YOU ARE DOING 
#
# Things in the section below are specific to your application.  The makefile
# templates will have absolutely no idea that these things exist.  They know
# about everything above.  If you define variables here that you want the
# templates to know about you must embed them in one of the above variables.
# You may need very specific make variables, and you may need specific
# variables that you need to let the templates know about.
#
# Example of how to "let the templates know" about your variable:
#
# Say you have a #define XYZ in all your c code.  Say you want to have the
# compiler define XYZ.  Well, to do that, you need to say this:
#
#   cc -c ... -DXYZ ...
#
# on the compile command line.  You can do this in this makefile like this:
#
# MY_AUX_DEFS = -DXYZ
#
# Then, in the section above, you would say:
#
# AUX_DFLAGS = $(MY_AUX_DEFS)
#
# And the templates would then know to put -DXYZ on every compiler command
# line in every makefile in your component.  Of course, you could just put
# -DXYZ directly into AUX_DFLAGS but that example would be too easy.
#
###########################  SPECIFIC VARIABLES  ###############################
###########################          ||          ###############################
###########################          ||          ###############################
###########################          \/          ###############################


########################             /\             ############################
########################             ||             ############################
########################             ||             ############################
########################  END OF SPECIFIC VARIABLES ############################
################################################################################


################################################################################
################################################################################
################################################################################
# VARIABLES THAT APPEND EXISTING VARIABLES
#
# These variables do not override anything, but the Make templates will use
# them in various ways if you fill them in.
#
# The default make rule is 'all' so if you have some special rules that you
# want to include in the all target, put them here in AUX_ALL
#
# Another common rule is 'clean'  so if you have some special clean rules
# that you want to include in the clean target, put them here in AUX_CLEAN
#
# There are also specific compiler and linker options you may want to append to
# the options already provided by the make commands.  This will only be
# necessary if you # have a special purpose :)
#
# REMEMBER:  filling these in will NOT override template values, they will
# append template values
#
#
###########################  APPENDING VARIABLES   #############################
###########################          ||            #############################
###########################          ||            #############################
###########################          \/            #############################

AUX_ALL     =
AUX_CLEAN   =
AUX_LIBS    =
AUX_DFLAGS  =
AUX_CFLAGS  = 
AUX_IFLAGS  =
AUX_LFLAGS  = 
AUX_LDFLAGS = 

########################             /\             ############################
########################             ||             ############################
########################             ||             ############################
######################## END OF APPENDING VARIABLES ############################
################################################################################


################################################################################
################################################################################
################################################################################
# VARIABLES THAT CAN BE OVERRIDDEN
#
# Things that can be overridden without causing harm to the way make works
# They're commented out for two reasons.
#      1.  because you probably won't want to override them 99% of the time
#      2.  they are just examples, there are other things that can be overridden
#      3.  they may become obsolete with new releases.
#
# REMEMBER:  filling these in will override existing template values.  For
# example, C_COMPILER is set to cc.  You could change that here to gcc if you
# wanted to.
#
# WARNING: the := vs = stuff is important so be careful with those!
#          The prior refers to simply expanded variables in which the value is
#          scanned once and for all when the variable is defined.  Hence, it
#          does not contain any references to other variables.  This defines
#          a static variable.  The latter refers to a recursively expanded
#          variable.  The value is installed verbatim that is, any references
#          to other variables are expanded whenever it is substituted.  This
#          defines a dynamic variable.
#
# Important ones below:
#   DEFAULT_TARGET -- what gets build when you say make with no arguments
#   RELEASE_TARGET -- what gets built when generating a release
#   OPTIMIZE_TAG   -- optimize tag on compiler (-g by default)
#   C_COMPILER     -- the C compiler (cc by default)
#   C_SRCS         -- the C source files;  This variable will overried the
#                     default value of performing a shell call to ls *.c
#                     which essentially gives a sorted listing of all C
#                     source code.  This variable should be overwritten
#                     when the order in which the C files are compiled
#                     is crucial.  Similarly, there are variables for
#                     all other supported languages that can be overwritten
#                     such as PERL_SRCS, so on and so forth.
#
#
########################### OVERRIDEABLE VARIABLES #############################
###########################          ||            #############################
###########################          ||            #############################
###########################          \/            #############################

#DEFAULT_TARGET      :=
#RELEASE_TARGET      :=
#C_SRCS              :=
#C_COMPILER          :=
#OPTIMIZE_TAG        := 
SWAWT_LINK_ENV       := LD_RUN_PATH=/usr/local/lib
SWAWT_RATIONAL       := LD_RUN_PATH=/usr/local/lib

#######################              /\               ##########################
#######################              ||               ##########################
#######################              ||               ##########################
####################### END OF OVERRIDEABLE VARIABLES ##########################
################################################################################


################################################################################
################################################################################
################################################################################
# EXTERNAL PACKAGE VARIABLES THAT CAN BE EXTENDED
#
# REMEMBER:  filling these in will append existing external package values.  Do
#  not remove the '+' sign in front of the '=' sign or you will screw things up.
#
# External packages are those that are downloaded and installed from other
# sites.  For example, downloading and referencing the ImageMagick source
# code which is needed to successfully compile the current package.
#
# The SYS_LIBS variable appends any library reference made to external packages.
# 
############################# EXTERNAL VARIABLES ###############################
#############################         ||         ###############################
#############################         ||         ###############################
#############################         \/         ###############################

EXTERNAL_ALL     +=
EXTERNAL_CLEAN   +=
EXTERNAL_LIBS    += 
EXTERNAL_LIBS    += 
EXTERNAL_DFLAGS  +=
EXTERNAL_CFLAGS  +=
EXTERNAL_IFLAGS  +=
EXTERNAL_LFLAGS  +=
EXTERNAL_LDFLAGS += 

SYS_LIBS         +=

#########################             /\            ############################
#########################             ||            ############################
#########################             ||            ############################
######################### END OF EXTERNAL VARIABLES ############################
################################################################################
#
# RULES SECTION:
#
# This section is for any specific targets you'd like to have in your makefile
# Standard gnu-make rules apply here.
#
# Example:  obviously the pound signs shouldn't be here for a real world thing
#
# quicklook:  idl something.pro
#
# Now you can say 'make quicklook' at the command line and this target would
# be invoked, which could in turn invoke anything in any of the templates.
#
# You could then set AUX_ALL=quicklook and that would cause quicklooks to be
# built (if they were out of date) anytime you said make with no arguments.
#
# SO...PUT YOUR RULES HERE
#
#############################  SPECIFIC RULES  #################################
###########################          ||          ###############################
###########################          ||          ###############################
###########################          \/          ###############################



########################             /\             ############################
########################             ||             ############################
########################             ||             ############################
########################    END OF SPECIFIC RULES   ############################
################################################################################
################################################################################
