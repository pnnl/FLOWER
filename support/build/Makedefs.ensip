################################################################################
# COPYRIGHT (C) 2008.  .  All Rights Reserved. 
#
# THIS FILE INITIALLY CREATED WITH:  
#     TEMPLATE NAME:  make_defs.template 
#     COMMAND NAME:   genmake -type def -comp ensip 
#
# REPOSITORY INFORMATION: 
#  $Revision$ 
#  $Author$ 
#  $Date$ 
#
# _____________________________________________________________________________
# 
# SYNOPSIS: 
#  [put a single sentence stating purpose of this file] 
#
# DESCRIPTION: 
#  [describe in detail the purpose and uses of this file] 
#
# 
################################################################################
################################################################################
################################################################################
# VARIABLES SPECIFIC TO WHAT YOU ARE DOING 
#
# Things in the section below are specific to your application.  The makefile
# templates will have absolutely no idea that these things exist.  They know
# about everything above.  If you define variables here that you want the
# templates to know about you must embed them in one of the above variables.
# You may need very specific make variables, and you may need specific
# variables that you need to let the templates know about.
#
# Example of how to "let the templates know" about your variable:
#
# Say you have a #define XYZ in all your c code.  Say you want to have the
# compiler define XYZ.  Well, to do that, you need to say this:
#
#   cc -c ... -DXYZ ...
#
# on the compile command line.  You can do this in this makefile like this:
#
# MY_COMP_DEFS = -DXYZ
#
# Then, in the section above, you would say:
#
# COMP_DFLAGS = $(MY_COMP_DEFS)
#
# And the templates would then know to put -DXYZ on every compiler command
# line in every makefile in your component.  Of course, you could just put
# -DXYZ directly into COMP_DFLAGS but that example would be too easy.
#
###########################  SPECIFIC VARIABLES  ###############################
###########################          ||          ###############################
###########################          ||          ###############################
###########################          \/          ###############################


########################             /\             ############################
########################             ||             ############################
########################             ||             ############################
########################  END OF SPECIFIC VARIABLES ############################
################################################################################


################################################################################
################################################################################
################################################################################
# VARIABLES THAT APPEND EXISTING VARIABLES
#
# These variables do not override anything, but the Make templates will use
# them in various ways if you fill them in.
#
# The default make rule is 'all' so if you have some special rules that you
# want to include in the all target, put them here in COMP_ALL
#
# Another common rule is 'clean'  so if you have some special clean rules
# that you want to include in the clean target, put them here in COMP_CLEAN
#
# There are also specific compiler and linker options you may want to append to
# the options already provided by the make commands.  This will only be
# necessary if you # have a special purpose :)
#
# REMEMBER:  filling these in will NOT override template values, they will
# append template values
#
#
###########################  APPENDING VARIABLES   #############################
###########################          ||            #############################
###########################          ||            #############################
###########################          \/            #############################

# First set some ENSIP-specific options, depending on how we're building.

# Are we a mac
ifeq ($(shell uname -a | awk '{print $$1}'), Darwin) 
  MAC_OSX = 1
else
  MAC_OSX = 0
endif

# Boost:
# Boost:
# Boost:  NOTE: To build Boost statically you must build it with Bjam like:
# Boost:
# Boost:        sudo ./tools/jam/src/bin.linux`uname -i`/bjam --without-mpi toolset=gcc optimization=speed link=static threading=single,multi cxxflags="-O3" install
# Boost:
# Boost:

ifeq ($(MAC_OSX), 0)
  PCAPVER            = $(shell rpm -qa | sort | uniq | perl -ne 'print "$$1.$$2.$$3" if (/libpcap-(\d+)\.(\d+)\.(\d+).*/)')
  PCAPVERDEF         = -D'PCAP_VER="$(PCAPVER)"'
  PCAPVERDEF         = -D'PCAP_VER="$(PCAPVER)"'
else
  PCAPVERDEF         = -D'PCAP_VER="0.9.4"'
endif

SVN_TAG_VERTEMP = 0
SVN_REPO           = $(shell svn info $(ENSIP_HOME) | grep ^URL: | awk '{ print $$2 }' | sed -e 's/trunk/tags/')
SVNVER             = $(shell cd $(ENSIP_HOME); svnversion -n . 2>&1 | perl -pne 's/\d+://; s/[MS]//')

SVNTAGVERDEF     = -D'SVN_TAG_VER="UNRELEASED"'
SVNBLDTYPDEF     = -D'SVN_BUILD_TYPE="d"'
SVNVERDEF        = -D'SVN_VER="$(SVNVER)"'
SWAWT_PACKAGE_VERSION = $(shell perl -MSWAWT::PkgStatus -e 'my $version = get_package_status_by_id("ensip-flower", "next_version"); $version =~ s/_dev//; print($version);')

ifeq ($(USER),$(shell getsetup warehouse_manager))
  ifneq ($(SWAWT_PACKAGE_VERSION),)
    ENSIP_RUNTYPE=g_3_1
    SVN_TAG_VERSION  = $(SWAWT_PACKAGE_VERSION)
    SVNTAGVERDEF     = -D'SVN_TAG_VER="$(shell echo $(SVN_TAG_VERSION))"'
    SVNBLDTYPDEF     = -D'SVN_BUILD_TYPE="r"'
    SVNVERDEF        = -D'SVN_VER="$(shell expr $(SVNVER) + 1)"'
  endif
endif

GCC_VER            = $(shell gcc -v 2>&1 | grep "^gcc version" | awk -F' ' '{print $$3}' | awk -F'.' '{print $$1$$2}')
GCC_TAG            = -gcc$(GCC_VER)
BOOST_TAG          = -mt-s

BOOST_DIR          = $(shell cd /usr/local && ls -d boost* | tail -1)
BOOST_VER          = $(shell echo $(BOOST_DIR) | sed -e "s/boost.//")
BOOSTVERDEF        = -D'BOOST_VER="$(shell echo $(BOOST_VER) | sed -e "s/_/-/g")"'


PLUGIN             = flower
ifneq ($(ENSIP_PLUGIN),)
  PLUGIN           = $(ENSIP_PLUGIN)
endif
PLUGINDEF          = -D'PLUGIN_$(PLUGIN)=1'


ifneq ($(IAM_GENRELEASING),)
  ENSIP_RUNTYPE=g_3_1
endif

COMP_CFLAGS        = -Wno-write-strings
CXX_OPTIMIZE_LEVEL = 0
CXX_DEBUG_LEVEL    = ON


ifneq ($(ENSIP_RUNTYPE),)
  COMPILER_OPTION  = $(shell echo $(ENSIP_RUNTYPE) | awk -F'_' '{print $$1}')
  OPTIMIZE_OPTION  = $(shell echo $(ENSIP_RUNTYPE) | awk -F'_' '{print $$2}')
  NDEBUG_OPTION    = $(shell echo $(ENSIP_RUNTYPE) | awk -F'_' '{print $$3}')

  ifeq ($(COMPILER_OPTION),g)
    CXX            = g++
    CXX_VERSION    = $(shell gcc -v 2>&1 | grep "^gcc version" | awk -F' ' '{print $$3}')
    CXX_VENDOR     = GNU
    ifneq ($(shell hostname),first)
      COMP_CFLAGS += -Wall -Wfatal-errors 
    endif
#COMP_CFLAGS += -mtune=core2
#  COMP_CFLAGS += -fno-threadsafe-statics
  endif

  ifeq ($(COMPILER_OPTION),i)
    CXX            = icc
    CXX_VERSION    = $(shell icc -v 2>&1 | awk '{print $2}')
    CXX_VENDOR     = Intel
    COMP_CFLAGS   += -w0 -wn1
    LINKER         = icpc
  endif

  ifneq ($(OPTIMIZE_OPTION),)
    ENSIP_OPTIMIZE     = -O$(OPTIMIZE_OPTION)
    ENSIP_OPTIMIZE    += -g -feliminate-unused-debug-symbols -fforce-addr -fmerge-all-constants

    ifeq ($(MAC_OSX),0)
      ENSIP_OPTIMIZE  += -finline-functions-called-once
    endif

    CXX_OPTIMIZE_LEVEL = $(OPTIMIZE_OPTION)
  endif

  ifeq ($(NDEBUG_OPTION),1)
    ENSIP_CFLAGS      += -DNDEBUG=1
    CXX_DEBUG_LEVEL    = OFF
  endif
endif

CXX_COMPILER       = $(CXX)
CXXVERDEF          = -D'CXX_VER="$(CXX_VENDOR) $(CXX_COMPILER) $(shell echo $(CXX_VERSION))"'
CXXOPTDEF          = -D'CXX_OPTIMIZE_LEVEL="$(CXX_OPTIMIZE_LEVEL)"'
CXXDBGDEF          = -D'CXX_DEBUG_LEVEL="$(CXX_DEBUG_LEVEL)"'

COMP_ALL           =
COMP_CLEAN         =
COMP_DFLAGS        =
COMP_CFLAGS       += $(ENSIP_CFLAGS)
COMP_IFLAGS        =
COMP_LFLAGS        =
COMP_LDFLAGS       =
COMP_LIBS          = -lflower

ifneq ($(ENSIP_PROFILE),)
  COMP_CFLAGS     += -pg 
  COMP_LDFLAGS    += -pg
endif

ifneq ($(TBB),)
  COMP_CFLAGS     += -DTBB
  #COMP_IFLAGS     += -I/home/lenaeus/dev/include
  #COMP_LFLAGS     += -L/home/lenaeus/dev/lib
  #COMP_LDFLAGS    += :/home/lenaeus/dev/lib
  COMP_LIBS       += -ltbb -ltbbmalloc
endif

########################             /\             ############################
########################             ||             ############################
########################             ||             ############################
######################## END OF APPENDING VARIABLES ############################
################################################################################


################################################################################
################################################################################
################################################################################
# VARIABLES THAT CAN BE OVERRIDDEN
#
# Things that can be overridden without causing harm to the way make works
# They're commented out for two reasons.
#      1.  because you probably won't want to override them 99% of the time
#      2.  they are just examples, there are other things that can be overridden
#      3.  they may become obsolete with new releases.
#
# REMEMBER:  filling these in will override existing template values.  For
# example, C_COMPILER is set to cc.  You could change that here to gcc if you
# wanted to.
#
# WARNING: the := vs = stuff is important so be careful with those!
#          The prior refers to simply expanded variables in which the value is
#          scanned once and for all when the variable is defined.  Hence, it
#          does not contain any references to other variables.  This defines
#          a static variable.  The latter refers to a recursively expanded
#          variable.  The value is installed verbatim that is, any references
#          to other variables are expanded whenever it is substituted.  This
#          defines a dynamic variable.
#
# Important ones below:
#   DEFAULT_TARGET -- what gets build when you say make with no arguments
#   RELEASE_TARGET -- what gets built when generating a release
#   OPTIMIZE_TAG   -- optimize tag on compiler (-g by default)
#   C_COMPILER     -- the C compiler (cc by default)
#   C_SRCS         -- the C source files;  This variable will overried the
#                     default value of performing a shell call to ls *.c
#                     which essentially gives a sorted listing of all C
#                     source code.  This variable should be overwritten
#                     when the order in which the C files are compiled
#                     is crucial.  Similarly, there are variables for
#                     all other supported languages that can be overwritten
#                     such as PERL_SRCS, so on and so forth.
#
#
########################### OVERRIDEABLE VARIABLES #############################
###########################          ||            #############################
###########################          ||            #############################
###########################          \/            #############################

#DEFAULT_TARGET    :=
#RELEASE_TARGET    :=
#C_SRCS            :=
#C_COMPILER        :=
OPTIMIZE_TAG        = $(ENSIP_OPTIMIZE)

#######################              /\               ##########################
#######################              ||               ##########################
#######################              ||               ##########################
####################### END OF OVERRIDEABLE VARIABLES ##########################
################################################################################


################################################################################
################################################################################
################################################################################
# EXTERNAL PACKAGE VARIABLES THAT CAN BE EXTENDED
#
# REMEMBER:  filling these in will append existing external package values.  Do
#  not remove the '+' sign in front of the '=' sign or you will screw things up.
#
# External packages are those that are downloaded and installed from other
# sites.  For example, downloading and referencing the ImageMagick source
# code which is needed to successfully compile the current package.
#
# The SYS_LIBS variable appends any library reference made to external packages.
# 
############################# EXTERNAL VARIABLES ###############################
#############################         ||         ###############################
#############################         ||         ###############################
#############################         \/         ###############################

ifeq ($(MAKE_TYPE),test)
  ENSIP_BOOST_LIBS = -lboost_test_exec_monitor$(BOOST_TAG) \
                     -lboost_unit_test_framework$(BOOST_TAG)
endif
ENSIP_BOOST_LIBS   = -lboost_program_options$(BOOST_TAG) \
                     -lboost_date_time$(BOOST_TAG) \
                     -lboost_filesystem$(BOOST_TAG) \
                     -lboost_regex$(BOOST_TAG) \
                     -lboost_system$(BOOST_TAG) \
                     -lpthread

ENSIP_BOOST_IFLAGS = -I/usr/local/$(BOOST_DIR)/include
ENSIP_BOOST_LFLAGS = -L/usr/local/$(BOOST_DIR)/lib

# Diag:

ENSIP_DIAG_LIBS    = -ldiagnostic_cpp -lDiagnosticC
ENSIP_DIAG_IFLAGS  = -I$(DIAGNOSTIC_HOME)/include
ENSIP_DIAG_LFLAGS  = -L$(DIAGNOSTIC_HOME)/lib

# Now put them all together

COMP_LDFLAGS      += -static
COMP_LDFLAGS      += -rdynamic

EXTERNAL_ALL       =
EXTERNAL_CLEAN     =
EXTERNAL_LIBS      = $(ENSIP_BOOST_LIBS)   $(ENSIP_DIAG_LIBS)
EXTERNAL_DFLAGS    =
EXTERNAL_CFLAGS    = $(SVNTAGVERDEF) $(SVNBLDTYPDEF) $(SVNVERDEF) $(CXXVERDEF) $(CXXOPTDEF) $(CXXDBGDEF) $(BOOSTVERDEF) $(PCAPVERDEF) $(PLUGINDEF)
EXTERNAL_LFLAGS    = $(ENSIP_BOOST_LFLAGS) $(ENSIP_DIAG_LFLAGS)
EXTERNAL_IFLAGS    = $(ENSIP_BOOST_IFLAGS) $(ENSIP_DIAG_IFLAGS)

SYS_LIBS           = -lpcap

#########################             /\            ############################
#########################             ||            ############################
#########################             ||            ############################
######################### END OF EXTERNAL VARIABLES ############################
################################################################################
################################################################################
