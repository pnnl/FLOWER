///////////////////////////////////////////////////////////////////////////////
// Copyright (C) (2011-2021) Battelle Memorial Institute. All Rights Reserved.
//
// CODING CONVENTIONS:
//    * Class names are CamelCase with first word upper case
//    * Functions are camelCase with first word lower case
//    * Function parameters are lower case with _ and have p_ prefix
//    * Member variables always use 'this' pointer
///////////////////////////////////////////////////////////////////////////////


#ifndef VERSIONINFO_HPP
#define VERSIONINFO_HPP


#include <ctime>
#include <pcap/pcap.h>
#include <string>


inline std::string getPcapVersion()
{
  return pcap_lib_version();
}


inline std::string getCompileTime()
{
  string compile_time;
  compile_time += __DATE__;
  compile_time += ", ";
  compile_time += __TIME__;
  compile_time += " (@COMPILE_TIME@)";
  return compile_time;
}


inline std::string getFullVersion()
{
  return "@MAJOR_VERSION@.@MINOR_VERSION@.@MICRO_VERSION@";
}


inline std::string getMajorVersion()
{
  return "@MAJOR_VERSION@";
}


inline std::string getMinorVersion()
{
  return "@MINOR_VERSION@";
}


inline std::string getMicroVersion()
{
  return "@MICRO_VERSION@";
}


inline std::string getBoostVersion()
{
  return "@Boost_VERSION@";
}


inline std::string getCompilerName()
{
  return "@COMPILER_NAME@";
}


inline std::string getCompilerVersion()
{
  return "@COMPILER_VERSION@";
}


inline std::string getCompilerDebugLevel()
{
  return "@CMAKE_BUILD_TYPE@";
}


inline std::string getCompilerOptimizeLevel()
{
  return "@CXX_OPTIMIZE_LEVEL@";
}


inline std::string getCsvHeader(bool const p_value) noexcept(true)
{
  if (p_value)
  {
    return "@CSV_HEADER@\n";
  }
  return "";
}

#endif // VERSIONINFO_HPP